include /etc/nginx/upstream.*.conf;

server {
    server_name  _;
    ssl_certificate {{ env "CERT_PATH" }};
    ssl_certificate_key {{ env "KEY_PATH" }};
    listen       443 ssl;
    add_header X-Request-ID $request_id; # Return to client
    proxy_read_timeout 50s;
    proxy_send_timeout 50s;
    proxy_connect_timeout 500ms;
    ssl_prefer_server_ciphers on;
    ssl_protocols TLSv1.1 TLSv1.2;
    ssl_dhparam /usr/local/nginx/ssl/dhparam.pem;
    ssl_ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-CBC-SHA:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES128-CBC-SHA:AES256-GCM-SHA384:AES256-SHA256:AES256-SHA:AES128-GCM-SHA256:AES128-SHA256:AES128-SHA;


    # For each service, there is a url router.
    # Dispatch to the corresponding backend
    # Using location block without regex is fast and using request_uri retains url encoded strings like %20
    # Example client usage: https://mo-97bda7aa1.mo.sap.corp/default-sample-service/sample-service/greeting

    location / {
        proxy_pass http:/$request_uri;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Request-ID $request_id; # Pass to app server
        proxy_set_header X-Request-Uri $request_uri;
        proxy_set_header Upgrade $http_upgrade;
    }

    location /nginx-health {
        return 200 "healthy\n";
    }
}
